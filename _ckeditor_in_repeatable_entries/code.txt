
    // EXPERIMENTAL !!! Need more testing
    // Fix for using Community CKEditor in repeatable fields
    // Code below was copied from c5.8.2.1
    // Nothing changed expect baseFloatZIndex was set to 10000

    /**
     * @return string
     */
    public function outputStandardEditorInitJSFunction()
    {
        $options = [
            'disableAutoInline' => true,
        ];

        if ($this->getPluginManager()->isSelected('sourcearea')) {
            $this->getPluginManager()->deselect('sourcedialog');
        }

        return $this->getEditorInitJSFunction($options);
    }

    /**
     * @param array $options
     *
     * @return string
     */
    public function getEditorInitJSFunction($options = [])
    {
        $pluginManager = $this->pluginManager;

        if ($this->allowFileManager()) {
            $pluginManager->select('concrete5filemanager');
            $pluginManager->select('concrete5uploadimage');
        } else {
            $pluginManager->deselect('concrete5filemanager');
            $pluginManager->deselect('concrete5uploadimage');
        }

        $this->requireEditorAssets();
        $plugins = $pluginManager->getSelectedPlugins();

        $options = array_merge(
            $options,
            [
                'plugins' => implode(',', $plugins),
                'stylesSet' => 'concrete5styles',
                'filebrowserBrowseUrl' => 'a',
                'uploadUrl' => (string) URL::to('/ccm/system/file/upload'),
                'language' => $this->getLanguageOption(),
                'customConfig' => '',
                'allowedContent' => true,
                'baseFloatZIndex' => 10000, /* Must come below modal variable in variables.less */
                'image2_captionedClass' => 'content-editor-image-captioned',
                'image2_alignClasses' => [
                    'content-editor-image-left',
                    'content-editor-image-center',
                    'content-editor-image-right',
                ],
                'toolbarGroups' => [
                    ['name' => 'mode', 'groups' => ['mode']],
                    ['name' => 'document', 'groups' => ['document']],
                    ['name' => 'doctools', 'groups' => ['doctools']],
                    ['name' => 'clipboard', 'groups' => ['clipboard']],
                    ['name' => 'undo', 'groups' => ['undo']],
                    ['name' => 'find', 'groups' => ['find']],
                    ['name' => 'selection', 'groups' => ['selection']],
                    ['name' => 'spellchecker', 'groups' => ['spellchecker']],
                    ['name' => 'editing', 'groups' => ['editing']],
                    ['name' => 'basicstyles', 'groups' => ['basicstyles']],
                    ['name' => 'cleanup', 'groups' => ['cleanup']],
                    ['name' => 'list', 'groups' => ['list']],
                    ['name' => 'indent', 'groups' => ['indent']],
                    ['name' => 'blocks', 'groups' => ['blocks']],
                    ['name' => 'align', 'groups' => ['align']],
                    ['name' => 'bidi', 'groups' => ['bidi']],
                    ['name' => 'paragraph', 'groups' => ['paragraph']],
                    ['name' => 'links', 'groups' => ['links']],
                    ['name' => 'insert', 'groups' => ['insert']],
                    ['name' => 'forms', 'groups' => ['forms']],
                    ['name' => 'styles', 'groups' => ['styles']],
                    ['name' => 'colors', 'groups' => ['colors']],
                    ['name' => 'tools', 'groups' => ['tools']],
                    ['name' => 'others', 'groups' => ['others']],
                    ['name' => 'about', 'groups' => ['about']],
                ],
            ]
        );

        $options = json_encode($options);
        $removeEmptyIcon = '$removeEmpty[\'i\']';

        $jsfunc = <<<EOL
        function(identifier) {
            window.CCM_EDITOR_SECURITY_TOKEN = "{$this->token}";
            CKEDITOR.dtd.{$removeEmptyIcon} = false;
            if (CKEDITOR.stylesSet.get('concrete5styles') === null) {
                CKEDITOR.stylesSet.add('concrete5styles', {$this->getStylesJson()});
            }
            var ckeditor = $(identifier).ckeditor({$options}).editor;
            ckeditor.on('blur',function(){
                return false;
            });
            ckeditor.on('remove', function(){
                $(this).destroy();
            });
            if (CKEDITOR.env.ie) {
                ckeditor.on('ariaWidget', function (e) {
                    setTimeout(function() {
                        var \$contents = $(e.editor.ui.contentsElement.$),
                            \$textarea = \$contents.find('>textarea.cke_source');
                        if (\$textarea.length === 1) {
                            \$textarea.css({
                                width: \$contents.innerWidth() + 'px',
                                height: \$contents.innerHeight() + 'px'
                            });
                        }
                    }, 50);
                });
            }
        }
EOL;

        return $jsfunc;
    }